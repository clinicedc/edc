#!/bin/bash
################################################################################
# Regenerate files:
#   - bin/scripts/dev_repos.sh
#   - requirements.tests/edc.txt
#
# based on contents of requirements.txt
######################

set -e  # on error, fail early

# Define paths to source and target files
source_requirements_file=../../requirements.txt
edc_requirements_tests_file=../../requirements.tests/edc.txt
dev_repos_script=dev_repos.sh

# Clear contents of files to be regenerated
echo -e "# Install editable repos\n# (autogenerated by bin/scripts/generate_reqs_files.sh)" > "${dev_repos_script}"
echo -e "# EDC develop codebase requirements\n# (autogenerated by bin/scripts/generate_reqs_files.sh)" > "${edc_requirements_tests_file}"

while read -r line; do
  # Determine package name (without version)
  package=${line%%=*}
  package=${package%%>*}
  package=${package%%<*}
  package=${package%%~*}

  # Generate pip install command to use in dev_repos.sh
  pip_install_cmd="pip install "
  if [[ ${package} == edc-* ]]; then
    pip_install_cmd="${pip_install_cmd}-e ../"
  elif [[ ${package} == "Django" ]]; then
    pip_install_cmd="${pip_install_cmd}-U "
  fi

  # Write to dev_repos.sh
  echo "${pip_install_cmd}${package}" >> ${dev_repos_script}

  # Write to requirements.tests/edc.txt
  if [[ "${package}" != "Django" ]]; then
    echo "${package}" >> ${edc_requirements_tests_file}
  fi

done < "${source_requirements_file}"
